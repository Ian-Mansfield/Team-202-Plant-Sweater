//This is Puesdo-Code for us to work off of. 

#define steps 4000 // how much step it will take
#define clockwise 0 // clockwise direction macro
#define anti_clockwise 1 // anti clockwise direction macro

//any needed functions here
//SPI Initalize 
uint8_t SPI1_Master_RecieveOnly (uint8_t data)
{
SPI1CON2bits.TXR = 0; //Transmit Data-Required Bit;
SPI1CON2bits.RXR = 1; // Receive FIFO Space-Required Bit;
SPI1TCNT = 1; // Load SPI Transfer Counter;
SPI1TXB = data; // Load data into SPI transmit buffer;
//while (PIR2bits.SPI1RXIF == 0); // Check for any SPI Receive Interrupts;
return (SPI1RXB); // Return data from SPI Receive Buffer Register;
}

//Motor Functions
void ms_delay(unsigned int val)
{
    while(val>0)
    {
        val--;
        __delay_ms(1);
    }
}

/*
                         Main application
 */

void system_init (void)
{
    //TRISB = 0x00;     // PORT B as output port
    //PORTB = 0x0F;
    EN_SetLow();
    __delay_ms(1);
    
    IN_1A_SetLow();
    IN_1B_SetLow();
    IN_2A_SetLow();
    IN_2B_SetLow();
}



void full_step_CW (step)
    {
    EN_SetHigh();
    
    for(int i=0; i<step; i++)
    {
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);

        IN_1A_SetHigh();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);

        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetHigh();

        __delay_ms(1);
    }
    
    EN_SetLow();
}

void full_step_CCW (step){

    EN_SetHigh();
    
    for(int i=0; i<step; i++)
    {
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);

        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetHigh();

        __delay_ms(1);
             
        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetHigh();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);
        
        EN_SetLow();
    }
}

void half_step_CW (step)
    {
    EN_SetHigh();
    
    for(int i=0; i<step; i++)
    {
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);

        IN_1A_SetHigh();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);

        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetHigh();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);
    }
    
    EN_SetLow();
}


void half_step_CCW (step)
    {
    EN_SetHigh();
    
    for(int i=0; i<step; i++)
    {
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetHigh();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetLow();
        IN_2B_SetHigh();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetHigh();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetLow();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetHigh();
        IN_2B_SetLow();

        __delay_ms(1);
        
        IN_1A_SetLow();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);

        IN_1A_SetHigh();
        IN_1B_SetHigh();
        IN_2A_SetLow();
        IN_2B_SetLow();

        __delay_ms(1);        
        
    }
    
    EN_SetLow();
}



//any variables here
//general
int covered; 
int activate; 

//analog
uint8_t ADC_Result;

//actuator
int step;

//serial
//configuration 
SPI1CON1 = 0x01;   //E2; // CKE; CKP; SDI/SDO Polarity;
SPI1CON2 = 0x07; // TXR; RXR;
SPI1BAUD = 0xFF; // SPI Baud Pre-Scaler;
SPI1CLK = 0x02; // SPI Clock Select;
SPI1CON0 = 0x82; // SPI Enable; BMODE; Master/Slave; MSb/LSb;
//variables
uint8_t test =0b10000000;
int8_t actualtemp;
int8_t actualtemp2;
int16_t temp; 
int16_t lowtemp = 0b0000110010011111;
//esp 32

void main(void)
{
    // Initialize the device, subsystem stuff, ect
    SYSTEM_Initialize();
    adc_result_t ADC_Result;
     ADCC_Initialize();
    //initalize interupts 
    
    
    while(1){
    //read spi/analog
    
    //Analog
    ADCC_StartConversion(ADC_IN);
        ADC_Result = ADCC_GetConversionResult();
    
    //SPI
    CS_SetLow(); 
        __delay_ms(500);
        actualtemp=SPI1_Master_RecieveOnly(test);
        CS_SetHigh(); 
        __delay_ms(1);
      CS_SetLow(); 
        __delay_ms(500);
        actualtemp2=SPI1_ReadyByte();
         CS_SetHigh(); 
        __delay_ms(1);
     temp = (actualtemp << 8) | actualtemp2;
       temp >>= 7;
    while(covered==0){
    if(temp==lowtemp){
    activate=1;
    }  
    if(ADC_Result <= 2404){
            activate=1;           
        }
    
    if(activate==1){
    //acitivate motor
    covered=1;
    //send status update, or whatever ian wants to do with wifi
    }
    __delay_ms(100);
   
   }
   while(covered==1){
   if(temp>lowtemp){
   activate=0;
   }
   if(ADC_Result > 2404){
            activate=1;           
   }
   if(activate==0){
   //reverse motor
   covered=0;
   //send status update, or whatever ian wants to do with wifi
   }
   }
   __delay_ms(100);
    
    
    }
    
    
    }

